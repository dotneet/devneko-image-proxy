#!/usr/bin/env node

require('dotenv').config()

const AWS = require('aws-sdk')
AWS.config.setPromisesDependency(require('bluebird'));

const iam = new AWS.IAM({apiVersion: '2010-05-08'})
const s3 = new AWS.S3({apiVersion: '2006-03-01'})

const Path = '/devneko-image-proxy/'

async function main () {
  // check the bucket name.
  const bucketName = process.env.S3_BUCKET
  const lambdaName = process.env.LAMBDA_NAME

  const buckets = (await s3.listBuckets({}).promise()).Buckets
  const bucketNames = buckets.map(bucket => bucket.Name)
  if (bucketNames.indexOf(bucketName) === -1) {
    throw new Error(`The bucket ${bucketName} does not exist.`)
  }

  let policy = await searchPolicy(lambdaName)
  if (typeof policy !== 'undefined') {
    console.log('A IAM policy is already exist.')
  } else {
    console.log('Creating a IAM policy...')
    policy = await createPolicy(bucketName, lambdaName)
  }

  let role = await searchRole(lambdaName)
  if (typeof role !== 'undefined') {
    console.log('A IAM role is already exist.')
  } else {
    console.log('Creating a IAM role...')
    role = await createRole(lambdaName)
  }

  const alreadyAttached = await existsRolePolicy(role.RoleName, policy.PolicyName)
  if (alreadyAttached) {
    console.log('A policy is already attached.')
  } else {
    console.log(`Attaching the policy "${policy.PolicyName}"  to the role "${role.RoleName}"...`)
    const res = await attachPolicy(role.RoleName, policy.Arn)
    console.log(res)
  }

  console.log(`Set following string to the environment variable LAMBDA_ROLE.`)
  console.log(`${role.Arn}`)
}

async function searchPolicy (lambdaName) {
  const policyName = `${lambdaName}-s3-access`
  const policies = (await iam.listPolicies({PathPrefix: Path, Scope: 'Local'}).promise()).Policies
  return policies.find(p => p.PolicyName === policyName)
}

async function createPolicy (bucketName, lambdaName) {
  const policyName = `${lambdaName}-s3-access`
  const policyDocument = {
    Version: '2012-10-17',
    Statement: [
      {
        Effect: 'Allow',
        Action: ['s3:ListBucket'],
        Resource: [`arn:aws:s3:::${bucketName}`]
      },
      {
        Effect: 'Allow',
        Action: [
          's3:PutObject',
          's3:GetObject'
        ],
        Resource: [`arn:aws:s3:::${bucketName}\/\*`]
      }
    ]
  }
  const params = {
    PolicyDocument: JSON.stringify(policyDocument),
    PolicyName: policyName,
    Path: Path,
    Description:  'this policy has been generated by devneko-image-proxy.'
  }
  return (await iam.createPolicy(params).promise()).Policy
}

async function searchRole (lambdaName) {
  const roleName = `${lambdaName}-role`
  const roles = (await iam.listRoles({PathPrefix: Path}).promise()).Roles
  return roles.find(r => r.RoleName === roleName)
}

async function createRole (lambdaName, policyArn) {
  const roleName = `${lambdaName}-role`
  const assumeRole = {
    Version: '2012-10-17',
    Statement: [
      {
        Action: 'sts:AssumeRole',
        Effect: 'Allow',
        Principal: {
          Service: 'lambda.amazonaws.com'
        }
      }
    ]
  }

  const params = {
    AssumeRolePolicyDocument: JSON.stringify(assumeRole),
    RoleName: roleName,
    Path: Path
  }
  return (await iam.createRole(params).promise()).Role
}

async function existsRolePolicy(roleName, policyName) {
  const data = (await iam.listAttachedRolePolicies({RoleName: roleName, PathPrefix: Path}).promise())
  const policies = data.AttachedPolicies
  return policies.some(p => p.PolicyName === policyName)
}

async function attachPolicy(roleName, policyArn) {
  const params = {
    PolicyArn: policyArn,
    RoleName: roleName
  }
  return iam.attachRolePolicy(params).promise()
}

main().catch(e => {
  console.error(e)
  process.exit(1)
})

